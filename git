<!-- vim: syntax=Markdown -->
# git

Which commit a tag points to?
```
$ git rev-list -n 1 $TAG
```

List all commits between two commit hashes
```
$ git rev-list --ancestry-path [commit1]^..[commit2]
```

Clone a repository and download all submodules
```
$ git clone --recursive <url>
```

Display a short-format version of your local repository status
```
$ git status -s
```

Create a new local branch from a remote one
```
$ git checkout --track origin/<ref>
```

Create and checkout a new branch starting from `<ref>`
```
$ git checkout -b <branch-name> <ref>
```

Show a file at a specific version
```
git show <treeish>:<path>
```

List all files in a commit.
```
git diff-tree --no-commit-id --name-only <ref> -r
```

Return repository root directory
```
$ git rev-parse --show-toplevel
```

Amend the last commit without editing the message
```
$ git commit --amend --no-edit
```

## Tags

List tags from all remotes or only the specified one
```
git ls-remote --tags [remote]
```

## Rebase

Rebase **branch** starting from **upstream** onto **newbase**
```
git rebase --onto newbase upstream branch
```

<!-- id: 10 -->
Rebase your current branch onto <target> branch
```
$ git checkout <branch>
$ git rebase origin/<remote>
```

## Branches

Reset the current branch to a specific commit
```
git reset --hard [commit]
```

Reset the current branch to the previous commit and keep the changes in the staging area
```
git reset HEAD^
```

Rename a local branch
```
git branch -m [old-name] <new-name>
```

Prune all stale (missing from remote) tracking branches
```
git fetch --prune|-p
```

```
git remote prune origin
```

## Staging area

Remove a file from the index and keeps it in the local filesystem
```
$ git rm --cached <file>
```

Rewind your current HEAD to the previous commit and preserves the changes in
your working directory
```
$ git reset --soft HEAD~1
```

Rewind your current HEAD to the previous commit and drop the changes
```
$ git reset --hard HEAD~1
```

Selectively reset the changes (hunks) in the staging area
```
$ git reset -p
```

## Working area

Selectively reset the changes (hunks) in the working area
```
$ git checkout -p
```

## git-diff

Diff last commit with changes not yet staged
```
$ git diff
```

Diff last commit with staged changes
```
$ git diff --staged
```

Diff last commit with staged changes (synonym of --staged)
```
$ git diff --cached
```

Display a summary of the changes
```
git diff --stat
```

## git-log

Nice looking git log completed with stashes
```
$ git log --oneline --graph --decorate --all $(git reflog show --format="%h" stash)
```

Oneline log with a list of changed files
```
$ git log --name-status --pretty="%h%x09%ad%x09%ar%x09%s" --date=short
```

Show path and status of changed files
```
$ git log --name-status
```

## git-submodule

Add a submodule to your repository
```
$ git submodule add <repository> [<path>]
```

Add a submodule to your repository with the given logical name
```
$ git submodule add <repository> [<path>] --name <logical>
```

List all repository's submodules
```
$ git submodule status
```

Initialize the submodules recorded in the index
```
$ git submodule init
```

Update the registered submodules, i.e. clone missing submodules and checkout
the commit specified in the index of the superproject
```
$ git submodule update [<path> ...]
```

Checkout the submodules to the remote tracking branch
```
$ git submodule update --remote
```

Initialize and clone the submodule
```
$ git submodule update --init
```

## git-stash

Stash everything, `-u` untracked files too, but keep `-k` the staged changes in your working copy.
The saved stash will contains everything, included the staged changes.
```
$ git stash -k -u
```

Show only the untracked files stored inside a stash.
```
git show 'stash@{0}^3'
```
